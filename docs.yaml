openapi: 3.0.0
info:
  title: Car Rental API
  description: API for managing users, cars, rentals, and transactions in a car rental service.
  version: 1.0.0

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://easy-rent-app-a10d2a06a670.herokuapp.com/api/v1
    description: Production server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        deposit_amount:
          type: number
          format: float
          description: Balance of the user
    Car:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        stock_availability:
          type: integer
        rental_cost:
          type: number
          format: float
        brands:
          type: string
    Rental:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        car_id:
          type: integer
        rental_start_date:
          type: string
          format: date-time
        rental_end_date:
          type: string
          format: date-time
        total_cost:
          type: number
          format: float
    Transaction:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        amount:
          type: number
          format: float
        transaction_status:
          type: string
        transaction_date:
          type: string
          format: date-time
        invoice_id:
          type: string
    Error:
      type: object
      properties:
        message:
          type: string

paths:
  /users/register:
    post:
      summary: Register a new user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/login:
    post:
      summary: User login
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/deposit:
    post:
      summary: Deposit money into user account
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deposit_amount:
                  type: number
                  format: float
      responses:
        '200':
          description: Deposit successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_amount:
                    type: number
                    format: float
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/cars:
    get:
      summary: Get all cars
      tags:
        - Car
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all cars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/cars/{id}:
    get:
      summary: Get a car by ID
      tags:
        - Car
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Car ID
      responses:
        '200':
          description: Car details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '404':
          description: Car not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/cars:
    post:
      summary: Create a new car
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '201':
          description: Car created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/cars/{id}:
    put:
      summary: Update a car
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Car ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '200':
          description: Car updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '404':
          description: Car not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a car
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Car ID
      responses:
        '204':
          description: Car deleted successfully
        '404':
          description: Car not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/transactions:
    get:
      summary: Get all transactions
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/transactions/{id}:
    get:
      summary: Get a transaction by ID
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Transaction ID
      responses:
        '200':
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/rentals:
    post:
      summary: Book a car rental
      tags:
        - Rental
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                car_id:
                  type: integer
                rental_start_date:
                  type: string
                  format: date-time
                rental_end_date:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Rental booked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rental'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/rentals/{id}:
    get:
      summary: Get a rental by ID
      tags:
        - Rental
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Rental ID
      responses:
        '200':
          description: Rental details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rental'
        '404':
          description: Rental not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/rentals/history:
    get:
      summary: Get all rentals for a user
      tags:
        - Rental
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all rentals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rental'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /webhook/xendit:
    post:
      summary: Update transaction status via webhook
      tags:
        - Webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                transaction_id:
                  type: integer
                status:
                  type: string
      responses:
        '200':
          description: Transaction status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
